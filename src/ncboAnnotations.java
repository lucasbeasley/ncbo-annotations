import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.io.*;
import java.util.*;

/**
 * Lucas Beasley
 * 09/25/17
 * Generating annotations using NCBO Annotator.
 */

public class ncboAnnotations {
    private static final String REST_URL = "http://data.bioontology.org";
    private static final ObjectMapper mapper = new ObjectMapper();

    public static class Annotation{
        private String term = "";           //term in paper
        private String id = "";             //GO:ID for ontology term
        private String ref = "";            //ontology term
        private int startIndex = -1;     //term's starting index in paper
        private int endIndex = -1;       //term's ending index in paper
        private String matchType = "";      //annotation match type (preferred or synonym)

        //getters/setters
        public void setTerm(String term){ this.term = term; }
        public void setID(String id){ this.id = id; }
        private void setRef(String ref){ this.ref = ref; }
        private void setStartIndex(int start){ this.startIndex = start; }
        private void setEndIndex(int end){ this.endIndex = end; }
        private void setMatchType(String mt){ this.matchType = mt; }
        public String getTerm(){ return this.term; }
        public String getID(){ return this.id; }
        private String getRef(){ return this.ref; }
        private int getStartIndex(){ return this.startIndex; }
        private int getEndIndex(){ return this.endIndex; }
        private String getMatchType(){ return this.matchType; }
    }

    public static void main(String[] args) {
        //map containing file names and the annotations generated by NCBO's annotator
        Map<String, JsonNode> GOannos = new HashMap<>();

        //input directory that contains raw text files (.txt)
        File inDirectory = new File("rawtext");

        //output directory
        File outDirectory = new File("output");

        //retrieve annotations from NCBO's annotator and write them to their respective files
        getAnnos(inDirectory, outDirectory);
    }

    /***
     * getWord uses the fixed indexes from the retrieved annotations to find the tagged term in the raw text file.
     * @param beginInd - beginning index for term in paper
     * @param endInd - ending index for term in paper
     * @param text - entire raw text file
     * @return exact term in paper
     */
    private static String getWord(String beginInd, String endInd, String text){
        String inText;

        int begin = Integer.parseInt(beginInd);
        int end = Integer.parseInt(endInd);
        inText = text.substring(begin, end);

        return inText;
    }

    /***
     * getAnnos pulls text data from input text files and gets annotations from NCBO's annotator
     * @param inDirectory - directory of raw text data
     * @param outDirectory - directory for output of tab-separated annotation files
     */
    private static void getAnnos(File inDirectory, File outDirectory){
        String filename, text = "", urlParams, encodedText;

        try{
            //get api key
            Scanner scan = new Scanner(new File("api_key.txt"));
            final String API_KEY = scan.nextLine();
            scan.close();

            try{
                //pull text data from each file and pass to NCBO
                for (File inputFile : inDirectory.listFiles()){
                    //get name of file and remove ".txt"
                    filename = inputFile.getName();
                    filename = filename.substring(0, filename.length()-4);

                    scan = new Scanner(inputFile);
                    JsonNode jsonannotations;

                    //pull text from paper
                    while(scan.hasNextLine()){
                        text += scan.nextLine();
                    }

                    //encode text
                    encodedText = URLEncoder.encode(text, "utf-8");
                    urlParams = "ontologies=GO&text=" + encodedText;

                    //pass text to NCBO
                    jsonannotations = jsonToNode(post(REST_URL + "/annotator", urlParams, API_KEY));

                    //pull info from annotations and sort by beginning index
                    List<Annotation> annotations = pullAndSort(jsonannotations, text);

                    //write annotations to file
                    writeOut(filename, annotations, outDirectory);

                    //reset value
                    text = "";
                }
            } catch (FileNotFoundException ex){
                System.out.println("Error: File not found.");
            } catch (UnsupportedEncodingException ex) {
                System.out.println("Error: Unsupported encoding.");
            }
        }catch (FileNotFoundException ex){
            System.out.println("Error: File not found. Could not retrieve API key.");
        }

    }

    /***
     * pullAndSort pulls the annotations from the json node for each text file and sorts them based upon starting indexes.
     * @param jsonannotations - json node contatining all annotations for a single text file
     * @param text - raw text from text file
     * @return sorted list of annotations
     */
    private static List<Annotation> pullAndSort(JsonNode jsonannotations, String text){
        List<Annotation> annos = new ArrayList<>();
        Annotation tempAnno;
        JsonNode details;
        String id, from, to;
        int fromfix;

        //load each annotation
        for (JsonNode a : jsonannotations) {
            //pull the GO:ID
            id = a.get("annotatedClass").get("@id").asText();
            //pull the list of annotations
            details = a.get("annotations");

            //retrieve details for each annotation, set fields, and add to list
            for(JsonNode anno : details) {
                tempAnno = new Annotation();
                tempAnno.setID("GO:" + id.substring(id.length() - 7));

                from = anno.get("from").asText();
                //***"From" field has an error and is off by one for the index of the the word***
                //fix "from" index
                fromfix = Integer.parseInt(from);
                from = Integer.toString(--fromfix);

                tempAnno.setStartIndex(fromfix);
                to = anno.get("to").asText();
                tempAnno.setEndIndex(Integer.parseInt(to));
                tempAnno.setMatchType(anno.get("matchType").asText());
                tempAnno.setRef(anno.get("text").asText());
                tempAnno.setTerm(getWord(from, to, text));

                annos.add(tempAnno);
            }
        }
        //sort the annotations based upon starting indexes
        Collections.sort(annos, Comparator.comparing(Annotation::getEndIndex));

        return annos;
    }

    /***
     * JsonNode creates a node out of a json file
     * @param jsonfile - json file returned from NCBO's annotator
     * @return json node containing all annotations for a json file
     */
    private static JsonNode jsonToNode(String jsonfile) {
        JsonNode root = null;

        try {
            root = mapper.readTree(jsonfile);
        } catch (JsonProcessingException e){
            e.printStackTrace();
        } catch (IOException ex){
            ex.printStackTrace();
        }

        return root;
    }

    /***
     * post creates a POST request to NCBO's Annotator
     * @param createdURL - url passed to Annotator
     * @param urlParams - parameters used to create the url
     * @return annotations from text files
     */
    private static String post(String createdURL, String urlParams, String API_KEY){
        URL url;
        HttpURLConnection connection;
        String line, result = "";

        try{
            //setup connection and connect
            url = new URL(createdURL);
            connection = (HttpURLConnection) url.openConnection();
            connection.setDoInput(true);
            connection.setDoOutput(true);
            connection.setInstanceFollowRedirects(false);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Authorization", "apikey token=" + API_KEY);
            connection.setRequestProperty("Accept", "application/json");
            connection.setRequestProperty("charset", "utf-8");
            connection.setUseCaches(false);

            DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
            outputStream.writeBytes(urlParams);
            outputStream.flush();
            outputStream.close();
            connection.disconnect();

            //get output
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            line = reader.readLine();
            while(line != null){
                result += line;
                line = reader.readLine();
            }
            reader.close();
        } catch (MalformedURLException ex){
            System.out.println("Error: Malformed URL.");
        } catch (IOException ex){
            System.out.println("Error: Connection error.");
        }
        return result;
    }

    /***
     * writeOut creates a file and writes the annotations of a text file to the tab-separated file
     * @param filename - name of input/output file
     * @param annotations - annotations from a file
     * @param directory - output file for .tsv files
     */
    private static void writeOut(String filename, List<Annotation> annotations, File directory){
        //setup output filename
        filename = directory + "/" + filename + ".tsv";
        File filen = new File(filename);

        //create and write to file
        try (PrintWriter writer = new PrintWriter(filen)) {
            writer.println("StartIndex\tEndIndex\tGO:ID\tTerm\tOntologyTerm\tMatchType");
            for (Annotation a : annotations){
                writer.println(a.getStartIndex() + "\t" + a.getEndIndex() + "\t" + a.getID() + "\t" + a.getTerm() +
                "\t" + a.getRef() + "\t" + a.getMatchType());
            }
            writer.close();
        } catch (FileNotFoundException ex) {
            System.out.println("Error: File not found; could not write.");
            System.out.println("File path: " + filename);
        }
    }
}